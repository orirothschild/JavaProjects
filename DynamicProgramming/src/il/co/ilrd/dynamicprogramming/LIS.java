package il.co.ilrd.dynamicprogramming;

public class LIS {
		// Function to find length of longest increasing subsequence
		public static int LIS(int[] A, int i, int n, int prev)
		{
			// Base case: nothing is remaining
			if (i == n) {
				return 0;
			}

			// case 1: exclude the current element and process the
			// remaining elements
			int excl = LIS(A, i + 1, n, prev);

			// case 2: include the current element if it is greater
			// than previous element in LIS
			int incl = 0;
			if (A[i] > prev) {
				incl = 1 + LIS(A, i + 1, n, A[i]);
			}

			// return maximum of above two choices
			return Integer.max(incl, excl);
		}

		// Program for Longest Increasing Subsequence
		public static void main(String[] args)
		{
			int[] A = { 6, 8, 4,6, 8, 4,6, 8, 4,6, 8, 4,6, 8, 4,6, 8, 4,6, 8, 4,6, 8, 4,6, 8, 4,6, 8, 4,6, 8, 4,6, 8, 4,6, 8, 4,6, 8, 4,6, 8, 4,6, 8, 4,6, 8, 4,6,6, 8, 4,6, 8, 4,6, 8, 4,6, 8, 4,6, 8, 4,6, 8, 4,6, 8, 4,6, 8, 4,6, 8, 4,6, 8, 4,6, 8, 4,6, 8, 4,6, 8, 4,6, 8, 4,6, 8, 4,6, 8, 4,6, 8, 4,6, 8, 4,6, 8, 4,6, 8, 4,6, 8, 4,6, 8, 4,6, 8, 4,6, 8, 4,6, 8, 4,6, 8, 4,6, 8, 4,6, 8, 4,6, 8, 4,6, 8, 4,6, 8, 4,6, 8, 4,6, 8, 4,6, 8, 4,6, 8, 4,6, 8, 4,6, 8, 4,6, 8, 4,6, 8, 4,6, 8, 4,6, 8, 4,6, 8, 4,6, 8, 4,6, 8, 4,6, 8, 4,6, 8, 4,6, 8, 4,6, 8, 4,6, 8, 4,6, 8, 4,6, 8, 4,6, 8, 4,6, 8, 4,6, 8, 4,6, 8, 4,6, 8, 4,6, 8, 4,6, 8, 4,6, 8, 4,6, 8, 4,6, 8, 4,6, 8, 4,6, 8, 4,6, 8, 4,6, 8, 4,6, 8, 4,6, 8, 4,6, 8, 4,6, 8, 4,6, 8, 4,6, 8, 4,6, 8, 4,6, 8, 4,6, 8, 4,6, 8, 4,6, 8, 4,6, 8, 4,6, 8, 4,6, 8, 4,6, 8, 4,6, 8, 4,6, 8, 4,6, 8, 4,6, 8, 4,6, 8, 4,6, 8, 4,6, 8, 4,6, 8, 4,6, 8, 4,6, 8, 4,6, 8, 4,6, 8, 4,6, 8, 4,6, 8, 4,6, 8, 4,6, 8, 4,6, 8, 4,6, 8, 4,6, 8, 4,6, 8, 4,6, 8, 4,6, 8, 4,6, 8, 4,6, 8, 4,6, 8, 4,6, 8, 4,6, 8, 4,6, 8, 4,6, 8, 4,6, 8, 4,6, 8, 4,6, 8, 4,6, 8, 4,6, 8, 4,6, 8, 4,6, 8, 4,6, 8, 4,6, 8, 4,6, 8, 4,6, 8, 4,6, 8, 4,6, 8, 4,6, 8, 4,6, 8, 4,6, 8, 4,6, 8, 4,6, 8, 4,6, 8, 4,6, 8, 4,6, 8, 4,6, 8, 4,6, 8, 4,6, 8, 4,6, 8, 4,6, 8, 4,6, 8, 4,6, 8, 4,6, 8, 4,6, 8, 4,6, 8, 4,6, 8, 4,6, 8, 4,6, 8, 4,6, 8, 4,6, 8, 4,6, 8, 4,6, 8, 4,6, 8, 4,6, 8, 4,6, 8, 4,6, 8, 4,6, 8, 4,6, 8, 4,6, 8, 4,6, 8, 4,6, 8, 4,6, 8, 4,6, 8, 4,6, 8, 4,6, 8, 4,6, 8, 4,6, 8, 4,6, 8, 4,6, 8, 4,6, 8, 4,6, 8, 4,6, 8, 4,6, 8, 4,6, 8, 4,6, 8, 4,6, 8, 4,6, 8, 4,6, 8, 4,6, 8, 4,6, 8, 4,6, 8, 4,6, 8, 4,6, 8, 4,6, 8, 4,6, 8, 4,6, 8, 4,6, 8, 4,6, 8, 4,6, 8, 4,6, 8, 4,6, 8, 4,6, 8, 4,6, 8, 4,6, 8, 4,6, 8, 4,6, 8, 4,6, 8, 4,6, 8, 4,6, 8, 4,6, 8, 4,6, 8, 4,6, 8, 4,6, 8, 4,6, 8, 4,6, 8, 4,6, 8, 4,6, 8, 4,6, 8, 4,6, 8, 4,6, 8, 4,6, 8, 4,6, 8, 4,6, 8, 4,6, 8, 4,6, 8, 4,6, 8, 4,6, 8, 4,6, 8, 4,6, 8, 4,6, 8, 4,6, 8, 4,6, 8, 4,6, 8, 4,6, 8, 4,6, 8, 4,6, 8, 4,6, 8, 4,6, 8, 4,6, 8, 4,6, 8, 4,6, 8, 4,6, 8, 4,6, 8, 4,6, 8, 4,6, 8, 4,6, 8, 4,6, 8, 4,6, 8, 4,6, 8, 4,6, 8, 4,6, 8, 4,6, 8, 4,6, 8, 4,6, 8, 4,6, 8, 4,6, 8, 4,6, 8, 4,6, 8, 4,6, 8, 4,6, 8, 4,6, 8, 4,6, 8, 4,6, 8, 4,6, 8, 4,6, 8, 4,6, 8, 4,6, 8, 4,6, 8, 4,6, 8, 4,6, 8, 4,6, 8, 4,6, 8, 4,6, 8, 4,6, 8, 4,6, 8, 4,6, 8, 4,6, 8, 4,6, 8, 4,6, 8, 4,6, 8, 4,6, 8, 4,6, 8, 4,6, 8, 4,6, 8, 4,6, 8, 4,6, 8, 4,6, 8, 4,6, 8, 4,6, 8, 4,6, 8, 4,6, 8, 4,6, 8, 4,6, 8, 4,6, 8, 4,6, 8, 4,6, 8, 4,6, 8, 4,6, 8, 4, 8, 4,6, 8, 4,6, 8, 4,6, 8, 4,6, 8, 4,6, 8, 4,6, 8, 4,6, 8, 4,6, 8, 4};

			System.out.print("Length of LIS is " + LIS(A, 0, A.length, Integer.MIN_VALUE));
		}
	}